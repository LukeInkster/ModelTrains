package ModelTrainLanguage.sandbox;

/*Generated by MPS */

import javax.swing.JFrame;
import javax.swing.JPanel;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import java.awt.image.BufferedImage;
import java.awt.Graphics2D;
import java.util.Timer;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import javax.swing.BorderFactory;
import java.awt.Dimension;
import java.util.TimerTask;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import java.awt.Font;
import java.awt.RenderingHints;
import java.awt.geom.Path2D;

public class map_ModelTrainSet extends JFrame {
  public static double standardLength = 168;
  public static double standardBuffers = 24;
  public static double sleeperDiv = 168 / 24.0;
  public static double railWidth = 16.5;
  public static double railThickness = 1;
  public static double sleeperWidth = sleeperDiv / 6;
  public static double sleeperLength = railWidth * 0.7;
  public static double drawGap = 2;
  public static double pointGapCurve = 0.5;
  public static String switchSuffix = "_switch";
  public static String crossSuffix = "_cross";
  public static double trainSpeed = 100;
  public static int fps = 20;
  public static double pricePerCM = 5;


  public static int width = 1000;
  public static int height = 700;
  public static int infoWidth = 300;
  public static double startAngle = 0;
  public JPanel panel;

  private static Map<String, String> trackCross = new HashMap<String, String>();
  private static Map<String, Double> trackCrossAngles = new HashMap<String, Double>();
  private static Map<String, TrackSegment> trackPointsMap = new HashMap<String, TrackSegment>();
  private static Map<String, String> trackCrossSwitchInfo = new HashMap<String, String>();
  private static Map<String, Double> radiusNameToValue = new HashMap<String, Double>();
  private static Map<String, Double> lengthToBuffers = new HashMap<String, Double>();
  private static Map<String, List<String>> routes = new HashMap<String, List<String>>();
  private static Map<String, Train> trains = new HashMap<String, Train>();
  private static List<TrackSegment> trackPoints = new ArrayList<TrackSegment>();
  private static Map<String, Double> angles = new HashMap<String, Double>();
  private static Map<String, List<Pair<Vector3, Double>>> routeDrawLocations = new HashMap<String, List<Pair<Vector3, Double>>>();
  private static Map<String, Integer> trackCounter = new HashMap<String, Integer>();
  private static Map<String, Double> trackPriceCounter = new HashMap<String, Double>();


  private BufferedImage trackImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
  private BufferedImage infoImage = new BufferedImage(infoWidth, height, BufferedImage.TYPE_INT_ARGB);

  private Graphics2D gT = trackImage.createGraphics();

  private Timer trainDrawer = new Timer();
  private static double scale;
  private static double cx;
  private static double cy;
  private double modelWidth;
  private double modelHeight;


  public static void main(String[] args) {
    map_ModelTrainSet mts = new map_ModelTrainSet();
    mts.init();
  }


  public void init() {
    String speed = "100";
    String angle = "0";
    String fps = "20";
    String cost = "5.0";
    checkVars(speed, angle, fps, cost);

    lengthToBuffers.put("1", 84.0d);
    lengthToBuffers.put("2", 168.0d);
    lengthToBuffers.put("3", 336.0d);

    radiusNameToValue.put("1", 371.0d);
    radiusNameToValue.put("2", 438.0d);
    radiusNameToValue.put("3", 505.0d);
    radiusNameToValue.put("4", 572.0d);

    Color c = new Color(0, 0, 0, Color.TRANSLUCENT);
    gT.setColor(c);
    gT.fillRect(0, 0, width, height);

    trackCreation();
    trackCrossSwitchCheck();
    trackTranslating();
    trackStation();
    trackDrawing();

    createRoutes();
    createRoutes2();

    trainSetup();
    trainCreateRoutePoints();

    setTitle("ModelTrain - " + "Example_Track");
    setResizable(false);
    setDefaultCloseOperation(EXIT_ON_CLOSE);
    panel = new JPanel() {
      @Override
      protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(trackImage, 0, 0, null);
        if (trains.size() > 0) {
          int i = 0;
          for (Map.Entry<String, Train> pair : trains.entrySet()) {
            if (pair.getValue().scale == 0) {
              continue;
            }
            Train t = pair.getValue();
            double xD = t.xLoc;
            double yD = t.yLoc;

            BufferedImage image = t.trainImage.img;
            Graphics2D g2d = ((Graphics2D) g);
            g2d.translate(xD, yD);
            g2d.scale(t.scale, t.scale);
            g2d.rotate(Math.toRadians(t.rot));
            g2d.translate(-image.getWidth(this) / 2, -image.getHeight(this) / 2);
            g2d.drawImage(image, 0, 0, this);
            if (i < trains.size() - 1) {
              g2d.translate(image.getWidth(this) / 2, image.getHeight(this) / 2);
              g2d.rotate(Math.toRadians(-t.rot));
              g2d.scale(1 / t.scale, 1 / t.scale);
              g2d.translate(-xD, -yD);
            }
            i++;
          }
        }
      }
    };
    this.setLayout(new GridBagLayout());
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.fill = GridBagConstraints.BOTH;
    gbc.gridx = 0;
    gbc.gridy = 0;
    add(panel, gbc);

    gbc.gridx = 1;

    gbc.gridwidth = 1;
    JPanel panel2 = new JPanel() {
      @Override
      protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        g.drawImage(infoImage, 0, 0, null);
      }
    };
    add(panel2, gbc);
    panel2.setBorder(BorderFactory.createLineBorder(Color.black, 2));

    panel2.setPreferredSize(new Dimension(infoWidth, height));
    panel.setPreferredSize(new Dimension(width - infoWidth, height));
    pack();
    setVisible(true);

    TrainPositionUpdate();


    trainDrawer.schedule(new TimerTask() {
      public void run() {
        TrainPositionUpdate();
      }
    }, 500, 1000 / map_ModelTrainSet.fps);

    this.addWindowListener(new WindowAdapter() {
      public void windowClosing(WindowEvent e) {
        trainDrawer.cancel();
        System.exit(0);
      }
    });

    // Info Panel 
    panel2.setLayout(new BoxLayout(panel2, BoxLayout.Y_AXIS));
    double totalPrice = 0;
    int totalTrack = 0;
    JLabel sub1 = new JLabel("Track Pieces: ");
    sub1.setFont(new Font("Serif", Font.BOLD, 18));
    panel2.add(sub1);
    int countDistance = 27;
    int priceDistance = 32;
    for (Map.Entry<String, Integer> pair : trackCounter.entrySet()) {
      String t = " | " + pair.getKey();
      double price = trackPriceCounter.get(pair.getKey());
      totalPrice += price;
      totalTrack += pair.getValue();

      while (t.length() < countDistance) {
        t += " ";
      }
      t += "x" + pair.getValue();
      while (t.length() < priceDistance) {
        t += " ";
      }
      t += "$" + String.format("%6.2f", price);
      JLabel tmp = new JLabel(t);
      tmp.setFont(new Font("Monospaced", Font.PLAIN, 11));
      panel2.add(tmp);
    }
    JLabel line;
    line = new JLabel(" ----------------------");
    panel2.add(line);
    JLabel tmp = new JLabel(" | Total Pieces:    " + totalTrack);
    tmp.setFont(new Font("Monospaced", Font.PLAIN, 11));
    panel2.add(tmp);
    tmp = new JLabel(" | Total Price :    $" + String.format("%.2f", totalPrice));
    tmp.setFont(new Font("Monospaced", Font.PLAIN, 11));
    panel2.add(tmp);
    line = new JLabel(" ----------------------");
    panel2.add(line);
    tmp = new JLabel(" Area: " + String.format("%.2f", modelWidth / 10.0) + " cm x " + String.format("%.2f", modelHeight / 10.0) + " cm");
    tmp.setFont(new Font("Monospaced", Font.PLAIN, 11));
    panel2.add(tmp);


  }


  private static void trainCreateRoutePoints() {
    for (Map.Entry<String, List<String>> pair : routes.entrySet()) {
      List<Pair<Vector3, Double>> points;
      points = new ArrayList<Pair<Vector3, Double>>();
      List<String> tracks = pair.getValue();
      Pair<Vector3, Double> p = null;

      for (String e : tracks) {
        print("R: " + e);
      }


      for (int i = 0; i < tracks.size(); i++) {
        TrackSegment ts = trackPointsMap.get(tracks.get(i));
        double len = ts.length;
        double trainSpeed = map_ModelTrainSet.trainSpeed / fps;
        double updates = len / trainSpeed;


        print("RT: " + ts.self);


        if (ts.angle != 0) {
          // Curve 
          Vector3 from = ts.fromPoint;
          Vector3 rotPoint = ts.rotationPoint;
          double angle = angles.get(ts.self);
          double fromAngle = 0;
          double toAngle = ts.angle;
          if (i < tracks.size() - 1 && ts.from.equals(tracks.get(i + 1)) || i > 1 && ts.to.equals(tracks.get(i - 1))) {
            angle += 180;
            from = ts.toPoint;
            fromAngle = ts.angle;
            toAngle = 0;
            print("Flip");
          }


          while (angle > 360) {
            angle -= 360;
          }
          while (angle < -360) {
            angle += 360;
          }
          print(" FA: " + fromAngle + ", TA: " + toAngle + " angle: " + angle);
          print(" TS.from: " + ts.from + ", TS.to: " + ts.to);

          for (int j = 1; j < updates; j++) {
            double t = j / updates;
            double rotMod = toAngle - fromAngle;
            double rotTrain = angle + fromAngle + rotMod * t;
            double rotPos = rotMod * t;
            p = new Pair<Vector3, Double>(rotatePoint(from.copy(), rotPos, rotPoint), rotTrain);
            points.add(p);
          }

        } else {
          // Straight 
          Vector3 from = ts.fromPoint;
          Vector3 to = ts.toPoint;
          double angle = angles.get(ts.self);
          if (i < tracks.size() - 1 && ts.from.equals(tracks.get(i + 1)) || i > 1 && ts.to.equals(tracks.get(i - 1))) {
            angle += 180;
            to = ts.fromPoint;
            from = ts.toPoint;
          }
          while (angle > 360) {
            angle -= 360;
          }
          while (angle < -360) {
            angle += 360;
          }

          for (int j = 1; j < updates; j++) {
            double t = j / updates;
            p = new Pair<Vector3, Double>(Vector3.lerp(from.copy(), to, t), angle);
            points.add(p);
          }
        }
      }
      routeDrawLocations.put(pair.getKey(), points);
    }
  }

  public void TrainPositionUpdate() {
    for (Map.Entry<String, Train> pair : trains.entrySet()) {
      if (pair.getValue().scale == 0) {
        double targetTrackWidth = railWidth * scale;
        double scale = targetTrackWidth / (pair.getValue().widthOriginal + 0.0);
        pair.getValue().heightScaled = (int) (pair.getValue().heightOriginal * scale);
        pair.getValue().widthScaled = (int) (pair.getValue().widthOriginal * scale);
        pair.getValue().scale = scale;
      }
      TrainPositionUpdate(pair.getValue());
    }
  }

  public void TrainPositionUpdate(Train t) {
    List<String> route = routes.get(t.routeName);
    if (route == null || route.size() < 2) {
      return;
    }

    if (t.currentPoint < t.pointsFromTrackEdge) {
      t.currentPoint += 1;
      return;
    }
    t.currentPoint += 1;


    List<Pair<Vector3, Double>> points = routeDrawLocations.get(t.routeName);
    if (t.currentPoint < routeDrawLocations.get(t.routeName).size() - t.pointsFromTrackEdge) {
      Pair<Vector3, Double> pair = routeDrawLocations.get(t.routeName).get(t.currentPoint);
      Vector3 pos = pair.a;

      double cx = map_ModelTrainSet.cx;
      double cy = map_ModelTrainSet.cy;
      double sx = scale;
      double sy = scale;

      int x = (int) (Math.round(sx * (pos.x + cx))) + 20;
      int y = (int) (Math.round(sy * (pos.z + cy))) + 10;


      t.xLoc = x;
      t.yLoc = y;
      t.rot = pair.b - 90;
      panel.repaint();
    } else {
      t.currentPoint = -100;
    }
  }




  private void trackCrossSwitchCheck() {
    // Update track connections with switch and crossing info 
    // i.e. A 1 -> 2 connection could become 1_cross -> 2 

    for (TrackSegment ts : trackPoints) {
      String n1 = ts.self;
      if (ts.self.contains(crossSuffix)) {
        n1 = ts.self.replace(crossSuffix, "");
      } else if (ts.self.contains(switchSuffix)) {
        n1 = ts.self.replace(switchSuffix, "");
      }
      if (trackCrossSwitchInfo.containsKey(n1 + ts.from)) {
        ts.from += trackCrossSwitchInfo.get(n1 + ts.from);
      } else if (trackCrossSwitchInfo.containsKey(n1 + ts.to)) {
        ts.to += trackCrossSwitchInfo.get(n1 + ts.to);
      }
    }
  }

  private void trackDrawing() {
    // First find range of x and z 
    double xMin = Double.MAX_VALUE;
    double xMax = Double.MIN_VALUE;
    double zMin = Double.MAX_VALUE;
    double zMax = Double.MIN_VALUE;
    for (TrackSegment ts : trackPoints) {
      for (Vector3[] vArray : ts.points) {
        for (Vector3 v : vArray) {
          xMin = Math.min(v.x, xMin);
          xMax = Math.max(v.x, xMax);
          zMin = Math.min(v.z, zMin);
          zMax = Math.max(v.z, zMax);
        }
      }
    }
    topDown(xMin, xMax, zMin, zMax);
  }

  private void topDown(double xMin, double xMax, double zMin, double zMax) {
    // Orthogonal projection 

    // Image padding 
    int xOff = 20;
    int yOff = 10;

    modelWidth = xMax - xMin;
    modelHeight = zMax - zMin;
    print("xScale: " + ((width - infoWidth - xOff * 2) / modelWidth));
    print("yScale: " + ((height - yOff * 2) / modelHeight));
    scale = Math.min((width - infoWidth - xOff * 2) / modelWidth, (height - yOff * 2) / modelHeight);

    scale = Math.min(scale, 2);
    cx = -xMin;
    cy = -zMin;
    double cx = -xMin;
    double cy = -zMin;
    double sx = scale;
    double sy = scale;

    gT.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
    gT.setRenderingHint(RenderingHints.KEY_STROKE_CONTROL, RenderingHints.VALUE_STROKE_PURE);
    for (TrackSegment ts : trackPoints) {

      // Draw sleepers 
      gT.setColor(Color.black);
      for (Vector3[] sleeper : ts.sleepers) {
        int i = 0;
        Path2D.Double poly = new Path2D.Double();
        boolean first = true;
        for (Vector3 v : sleeper) {
          double x = sx * (v.x + cx) + xOff;
          double y = sy * (v.z + cy) + yOff;
          if (first) {
            poly.moveTo(x, y);
            first = false;
          } else {
            poly.lineTo(x, y);
          }
          i++;
        }
        poly.closePath();
        gT.fill(poly);
      }
      // Draw rails 
      for (Vector3[] points : ts.points) {
        gT.setColor(Color.darkGray);

        int i = 0;
        Path2D.Double poly = new Path2D.Double();
        boolean first = true;
        for (Vector3 v : points) {
          double x = sx * (v.x + cx) + xOff;
          double y = sy * (v.z + cy) + yOff;
          if (first) {
            poly.moveTo(x, y);
            first = false;
          } else {
            poly.lineTo(x, y);
          }
          i++;
        }
        if (ts.isStation && ts.angle == 0) {
          gT.setColor(Color.RED);
        }
        poly.closePath();
        gT.fill(poly);
      }



    }
  }

  private void trackTranslating() {
    boolean started = false;
    boolean done = false;
    int doneCounter = 0;
    int doneLimit = 15;
    while (!(done) && doneCounter < doneLimit) {
      done = true;
      for (TrackSegment ts : trackPoints) {
        if (angles.containsKey(ts.self)) {
          continue;
        }
        done = false;

        String dir = "- F";
        TrackSegment target;
        double angle;
        Vector3 targetPosition;
        Vector3 originPosition;

        print("#Track: " + ts.self + ", from: " + ts.from + ", to: " + ts.to);

        if (angles.containsKey(ts.from)) {
          target = trackPointsMap.get(ts.from);
          originPosition = ts.fromPoint;
          if (target.from.equals(ts.self)) {
            dir += "F";
            angle = 180 + angles.get(target.self);
            targetPosition = target.fromPoint;
          } else {
            dir += "T";
            angle = angles.get(target.self) + target.angle;
            targetPosition = target.toPoint;
          }
        } else if (angles.containsKey(ts.to)) {
          dir = "- T";
          target = trackPointsMap.get(ts.to);
          originPosition = ts.toPoint;
          if (target.to.equals(ts.self)) {
            dir += "T";
            angle = angles.get(target.self) + target.angle + 180 - ts.angle;
            targetPosition = target.toPoint;
          } else {
            dir += "F";
            angle = angles.get(target.self) - ts.angle;
            targetPosition = target.fromPoint;
          }
        } else {
          if (!(started)) {
            started = true;
            originPosition = Vector3.zero;
            targetPosition = Vector3.zero;
            angle = startAngle;
          } else {
            continue;
          }
        }
        while (angle > 360) {
          angle -= 360;
        }
        while (angle < -360) {
          angle += 360;
        }
        angles.put(ts.self, angle);
        ts.points[0] = rotatePoints(ts.points[0], angle, Vector3.zero);
        ts.points[1] = rotatePoints(ts.points[1], angle, Vector3.zero);
        ts.sleepers = rotateAllPoints(ts.sleepers, angle, Vector3.zero);
        ts.fromPoint = rotatePoint(ts.fromPoint, angle, Vector3.zero);
        ts.toPoint = rotatePoint(ts.toPoint, angle, Vector3.zero);
        if (ts.rotationPoint != Vector3.zero) {
          ts.rotationPoint = rotatePoint(ts.rotationPoint, angle, Vector3.zero);
        }
        Vector3 offset = Vector3.subtract(targetPosition, originPosition);
        print(offset);
        ts.points[0] = movePoints(ts.points[0], offset);
        ts.points[1] = movePoints(ts.points[1], offset);
        ts.sleepers = moveAllPoints(ts.sleepers, offset);
        ts.fromPoint = movePoint(ts.fromPoint, offset);
        ts.toPoint = movePoint(ts.toPoint, offset);
        if (ts.rotationPoint != Vector3.zero) {
          ts.rotationPoint = movePoint(ts.rotationPoint, offset);
        }

        print("Track: " + ts.self + dir);
        print("From: " + ts.fromPoint + ", To: " + ts.toPoint);
        print("Angle: " + angle + "," + (angle + ts.angle));

        // Handle cross and switch track 
        String a = ts.self;
        String b = StringUtils.substring(ts.self, 0, ts.self.length() - crossSuffix.length());
        String tsCrossName = "";
        if (trackCross.containsKey(a)) {
          tsCrossName = trackCross.get(a);
        } else if (trackCross.containsValue(a)) {
          tsCrossName = b;
        }
        if (!(tsCrossName.equals(""))) {
          TrackSegment tsCross = trackPointsMap.get(tsCrossName);
          print("#Track: " + tsCross.self + ", from: " + tsCross.from + ", to: " + tsCross.to);

          tsCross.points[0] = rotatePoints(tsCross.points[0], angle, Vector3.zero);
          tsCross.points[1] = rotatePoints(tsCross.points[1], angle, Vector3.zero);
          tsCross.sleepers = rotateAllPoints(tsCross.sleepers, angle, Vector3.zero);
          tsCross.fromPoint = rotatePoint(tsCross.fromPoint, angle, Vector3.zero);
          tsCross.toPoint = rotatePoint(tsCross.toPoint, angle, Vector3.zero);
          if (tsCross.rotationPoint != Vector3.zero) {
            tsCross.rotationPoint = rotatePoint(tsCross.rotationPoint, angle, Vector3.zero);
          }


          Vector3 moveTo = Vector3.subtract(Vector3.midPoint(ts.fromPoint, ts.toPoint), Vector3.midPoint(tsCross.fromPoint, tsCross.toPoint));
          tsCross.points[0] = movePoints(tsCross.points[0], moveTo);
          tsCross.points[1] = movePoints(tsCross.points[1], moveTo);
          tsCross.sleepers = moveAllPoints(tsCross.sleepers, moveTo);
          tsCross.fromPoint = movePoint(tsCross.fromPoint, moveTo);
          tsCross.toPoint = movePoint(tsCross.toPoint, moveTo);
          if (tsCross.rotationPoint != Vector3.zero) {
            tsCross.rotationPoint = movePoint(tsCross.rotationPoint, moveTo);
          }


          angle += trackCrossAngles.get(tsCrossName);
          angles.put(tsCross.self, angle);
          angle = trackCrossAngles.get(tsCrossName);
          Vector3 center = Vector3.midPoint(tsCross.fromPoint, tsCross.toPoint);
          tsCross.points[0] = rotatePoints(tsCross.points[0], angle, center);
          tsCross.points[1] = rotatePoints(tsCross.points[1], angle, center);
          tsCross.sleepers = rotateAllPoints(tsCross.sleepers, angle, center);
          tsCross.fromPoint = rotatePoint(tsCross.fromPoint, angle, center);
          tsCross.toPoint = rotatePoint(tsCross.toPoint, angle, center);
          if (tsCross.rotationPoint != Vector3.zero) {
            tsCross.rotationPoint = rotatePoint(tsCross.rotationPoint, angle, center);
          }


          print("  Track: " + tsCross.self);
          print("From: " + tsCross.fromPoint + ", To: " + tsCross.toPoint);
          print("  Angle: " + angle + "," + (angle + ts.angle));
        }

        String tsSwitchName = "";
        a = ts.self + switchSuffix;
        b = StringUtils.substring(ts.self, 0, ts.self.length() - switchSuffix.length());


        if (trackPointsMap.containsKey(a)) {
          tsSwitchName = a;
        } else if (trackPointsMap.containsKey(b)) {
          tsSwitchName = b;
        }
        if (!(tsSwitchName.equals(""))) {
          TrackSegment tsSwitch = trackPointsMap.get(tsSwitchName);
          print("#Track: " + tsSwitch.self + ", from: " + tsSwitch.from + ", to: " + tsSwitch.to);
          tsSwitch.points[0] = rotatePoints(tsSwitch.points[0], angle, Vector3.zero);
          tsSwitch.points[1] = rotatePoints(tsSwitch.points[1], angle, Vector3.zero);
          tsSwitch.sleepers = rotateAllPoints(tsSwitch.sleepers, angle, Vector3.zero);
          tsSwitch.fromPoint = rotatePoint(tsSwitch.fromPoint, angle, Vector3.zero);
          tsSwitch.toPoint = rotatePoint(tsSwitch.toPoint, angle, Vector3.zero);
          if (tsSwitch.rotationPoint != Vector3.zero) {
            tsSwitch.rotationPoint = rotatePoint(tsSwitch.rotationPoint, angle, Vector3.zero);
          }


          Vector3 moveTo = ts.fromPoint;
          tsSwitch.points[0] = movePoints(tsSwitch.points[0], moveTo);
          tsSwitch.points[1] = movePoints(tsSwitch.points[1], moveTo);
          tsSwitch.sleepers = moveAllPoints(tsSwitch.sleepers, moveTo);
          tsSwitch.fromPoint = movePoint(tsSwitch.fromPoint, moveTo);
          tsSwitch.toPoint = movePoint(tsSwitch.toPoint, moveTo);
          if (tsSwitch.rotationPoint != Vector3.zero) {
            tsSwitch.rotationPoint = movePoint(tsSwitch.rotationPoint, moveTo);
          }


          angles.put(tsSwitch.self, angles.get(ts.self));

          print("  Track: " + tsSwitch.self);
          print("From: " + tsSwitch.fromPoint + ", To: " + tsSwitch.toPoint);
          print("  Angle: " + angle + "," + (angle + ts.angle));
        }
      }
      doneCounter += 1;
    }
  }

  public static double arcLength(double r, double a) {
    return Math.abs(Math.toRadians(a) * r);
  }

  public static double arcPercentToAngle(double len, double maxLen, double maxAngle) {
    return len / maxLen * maxAngle;
  }

  public static Vector3 arcCalc(double p, double r, double a) {
    if (r == 0) {
      return new Vector3(0, 0, p);
    }
    Vector3 center = new Vector3(0, 0, r);
    Vector3 point = new Vector3(0, 0, p);
    double d = Math.toRadians(a);
    double x2 = (-Math.sin(d) * (point.z - center.z));
    double y2 = (Math.cos(d) * (point.z - center.z) + center.z);
    return new Vector3(x2, 0, y2);
  }

  public static Vector3 rotatePoint(Vector3 point, double angle, Vector3 rotPoint) {
    return rotatePoints(new Vector3[]{point}, angle, rotPoint)[0];
  }

  public static Vector3[][] rotateAllPoints(Vector3[][] allPoints, double angle, Vector3 rotPoint) {
    for (int i = 0; i < allPoints.length; i++) {
      allPoints[i] = rotatePoints(allPoints[i], angle, rotPoint);
    }
    return allPoints;
  }

  public static Vector3[] rotatePoints(Vector3[] points, double angle, Vector3 rotPoint) {
    // Rotate list of vectors around a point 
    if (angle == 0) {
      return points;
    }
    Vector3 center = rotPoint;
    for (Vector3 point : points) {
      double a = Math.toRadians(angle);
      double x = (Math.cos(a) * (point.x - center.x) - Math.sin(a) * (point.z - center.z) + center.x);
      double z = (Math.sin(a) * (point.x - center.x) + Math.cos(a) * (point.z - center.z) + center.z);
      point.x = x;
      point.z = z;
    }
    return points;
  }

  public static Vector3 movePoint(Vector3 point, Vector3 offset) {
    return movePoints(new Vector3[]{point}, offset)[0];
  }

  public static Vector3[][] moveAllPoints(Vector3[][] allPoints, Vector3 offset) {
    for (int i = 0; i < allPoints.length; i++) {
      allPoints[i] = movePoints(allPoints[i], offset);
    }
    return allPoints;
  }

  public static Vector3[] movePoints(Vector3[] points, Vector3 offset) {
    for (int i = 0; i < points.length; i++) {
      points[i] = Vector3.add(points[i], offset);
    }
    return points;
  }


  /**
   * Helper methods and classes, and lastly code generated from track structures
   */
  public static void print(Object o) {
  }

  public static void addTrackCross(String t1, String t2, double angle) {
    trackCross.put(t1, t2);
    trackCrossAngles.put(t1, -angle);
    trackCrossAngles.put(t2, angle);
  }

  public static double getRadius(String type) {
    return radiusNameToValue.get(type);
  }

  public static double getLength(String size) {
    return lengthToBuffers.get(size);
  }

  public static void addTrackSegment(String self, Vector3[][] points, Vector3[][] sleepers, String from, String to, Vector3 fromPoint, Vector3 toPoint, double length, double angle, Vector3 rotPoint) {
    TrackSegment s = new TrackSegment(self, points, sleepers, from, to, fromPoint, toPoint, length, angle, rotPoint);
    trackPoints.add(s);
    trackPointsMap.put(self, s);
  }
  public static void addTrackSegment(String self, Vector3[][] points, Vector3[][] sleepers, String from, String to, Vector3 fromPoint, Vector3 toPoint, double length) {
    addTrackSegment(self, points, sleepers, from, to, fromPoint, toPoint, length, 0, Vector3.zero);
  }

  public static Vector3[] createSleeper() {
    // Behold, a rectangle 
    Vector3[] points = new Vector3[4];
    points[0] = new Vector3(sleeperWidth, 0, -sleeperLength);
    points[1] = new Vector3(sleeperWidth, 0, sleeperLength);
    points[2] = new Vector3(-sleeperWidth, 0, sleeperLength);
    points[3] = new Vector3(-sleeperWidth, 0, -sleeperLength);
    return points;
  }

  public static void addCrossSwitchInfo(String key, String value) {
    trackCrossSwitchInfo.put(key, value);
  }

  public static void addRouteSegment(String name, String track) {
    if (routes.containsKey(name)) {
      routes.get(name).add(track);
    } else {
      routes.put(name, new ArrayList<String>());
      addRouteSegment(name, track);
    }
  }

  private static void createRoutes2() {
    for (Map.Entry<String, List<String>> pair : routes.entrySet()) {
      addRoute(pair.getKey(), pair.getValue());
    }
  }

  public static void addRoute(String name, List<String> tracks) {
    for (Map.Entry<String, String> pair : trackCrossSwitchInfo.entrySet()) {
      print(pair.getKey() + "," + pair.getValue());

    }
    print("Route: " + name + " tracks: " + tracks.size());
    for (int i = 0; i < tracks.size() - 1; i++) {
      String n1 = tracks.get(i);
      print("Track i: " + tracks.get(i));
      print("Track i+1: " + tracks.get(i + 1));



      if (n1.contains(crossSuffix)) {
        n1 = n1.replace(crossSuffix, "");
      } else if (n1.contains(switchSuffix)) {
        n1 = n1.replace(switchSuffix, "");
      }


      if (trackCrossSwitchInfo.containsKey(n1 + tracks.get(i + 1))) {
        String mod = trackCrossSwitchInfo.get(n1 + tracks.get(i + 1));
        if (mod.equals(switchSuffix) && i + 2 < tracks.size()) {
          TrackSegment next = trackPointsMap.get(tracks.get(i + 1));
          TrackSegment next2 = trackPointsMap.get(tracks.get(i + 2));
          print("R: " + name + " Next: " + next.self + ", N2: " + next2.self);
          if (!(next2.from.equals(next.self + mod)) && !(next2.to.equals(next.self + mod))) {
            continue;
          }
        }

        tracks.set(i + 1, tracks.get(i + 1) + trackCrossSwitchInfo.get(n1 + tracks.get(i + 1)));
        print("  Track i: " + tracks.get(i));
        print("  Track i+1: " + tracks.get(i + 1));

      }


    }
    routes.put(name, tracks);
  }


  public static void addToTrackCounter(String trackType, double price) {
    if (trackPriceCounter.containsKey(trackType)) {
      trackPriceCounter.put(trackType, trackPriceCounter.get(trackType) + price);
      trackCounter.put(trackType, trackCounter.get(trackType) + 1);
    } else {
      trackPriceCounter.put(trackType, price);
      trackCounter.put(trackType, 1);
    }
  }

  private void checkVars(String s, String a, String f, String p) {
    try {
      double d = Double.parseDouble(s);
      trainSpeed = d;
    } catch (NumberFormatException e) {
    }
    try {
      double d = Double.parseDouble(a);
      startAngle = d;
    } catch (NumberFormatException e) {
    }
    try {
      double d = Double.parseDouble(p);
      pricePerCM = d;
    } catch (NumberFormatException e) {
    }
    try {
      int d = Integer.parseInt(f);
      fps = d;
    } catch (NumberFormatException e) {
    }
  }


  public static void setStationStatus(String trackName) {
    trackPointsMap.get(trackName).isStation = true;
  }

  public static void addTrain(String name, Train t) {
    trains.put(name, t);
  }

  private void trackStation() {
    
    {
      map_ModelTrainSet.setStationStatus("60");
    };
    
    {
      map_ModelTrainSet.setStationStatus("50");
    };
  }

  private void trainSetup() {
    
    {
      String self = "Train1";
      int nCars = 1;
      String route = "r2";
      map_ModelTrainSet.addTrain(self, new Train(self, nCars, route));
    };
    
    {
      String self = "Train2";
      int nCars = 0;
      String route = "r1";
      map_ModelTrainSet.addTrain(self, new Train(self, nCars, route));
    };
  }

  private void createRoutes() {
    
    {
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "50");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "51");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "2");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "3");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "4");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "54");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "5");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "6");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "7");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "8");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "9");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "10");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "11");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "12");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "59");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r1", "60");
      };
    };
    
    {
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "1");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "2");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "3");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "52");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "53");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "54");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "55");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "56");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "57");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "58");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "10");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "11");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "12");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "13");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "14");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "15");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "16");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "17");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "18");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "19");
      };
      
      {
        map_ModelTrainSet.addRouteSegment("r2", "1");
      };
    };
  }

  private void trackCreation() {
    // Turns track pieces into sets of 3d positions 
    // Heaps of generated code: 
    {
      String self = "1";
      String track1Name = "";
      String track2Name = "2";
      boolean dir = false;
      boolean first = true;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("22.5");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "22.5";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "2";
      String switchSuffix = map_ModelTrainSet.switchSuffix;
      boolean dir = false;
      String track1Name = "3";
      String track2Name = "1";
      String track3Name = "51";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("") && track3Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {

        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = 22.5;
        double dRad = 438;
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);
        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;

        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self + switchSuffix, points, sleeperList, track1Name, track3Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        if (!(track3Name.equals(""))) {
          map_ModelTrainSet.addCrossSwitchInfo(track3Name + self, switchSuffix);
        }
        if (!(track1Name.equals(""))) {
          map_ModelTrainSet.addCrossSwitchInfo(track1Name + self, switchSuffix);

        }

        double len = 168;
        points = new Vector3[2][4];
        leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }
        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        map_ModelTrainSet.addToTrackCounter("Switch " + ((dir ? "Left" : "Right")), ((dLen + len) / 100 * priceMod));

      }
    }
    {
      String self = "3";
      String switchSuffix = map_ModelTrainSet.switchSuffix;
      boolean dir = true;
      String track1Name = "2";
      String track2Name = "4";
      String track3Name = "52";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("") && track3Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {

        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = 22.5;
        double dRad = 438;
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);
        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;

        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self + switchSuffix, points, sleeperList, track1Name, track3Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        if (!(track3Name.equals(""))) {
          map_ModelTrainSet.addCrossSwitchInfo(track3Name + self, switchSuffix);
        }
        if (!(track1Name.equals(""))) {
          map_ModelTrainSet.addCrossSwitchInfo(track1Name + self, switchSuffix);

        }

        double len = 168;
        points = new Vector3[2][4];
        leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }
        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        map_ModelTrainSet.addToTrackCounter("Switch " + ((dir ? "Left" : "Right")), ((dLen + len) / 100 * priceMod));

      }
    }
    {
      String self = "4";
      String track1Name = "3";
      String track2Name = "54";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dThk = map_ModelTrainSet.railThickness;
        double len = map_ModelTrainSet.getLength("3");
        Vector3[][] points = new Vector3[2][4];
        Vector3[] leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        Vector3[] rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        int sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        int j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        String l = "3";
        map_ModelTrainSet.addToTrackCounter("Straight " + " L:" + l, ((len) / 100 * priceMod));

      }
    }
    {
      String self = "5";
      String track1Name = "54";
      String track2Name = "6";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("45");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "45";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "6";
      String track1Name = "5";
      String track2Name = "7";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("45");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "45";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "7";
      String track1Name = "6";
      String track2Name = "8";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("45");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "45";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "8";
      String track1Name = "7";
      String track2Name = "9";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("22.5");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "22.5";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "9";
      String track1Name = "8";
      String track2Name = "10";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("22.5");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "22.5";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "10";
      String switchSuffix = map_ModelTrainSet.switchSuffix;
      boolean dir = true;
      String track1Name = "11";
      String track2Name = "9";
      String track3Name = "58";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("") && track3Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {

        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = 22.5;
        double dRad = 438;
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);
        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;

        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self + switchSuffix, points, sleeperList, track1Name, track3Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        if (!(track3Name.equals(""))) {
          map_ModelTrainSet.addCrossSwitchInfo(track3Name + self, switchSuffix);
        }
        if (!(track1Name.equals(""))) {
          map_ModelTrainSet.addCrossSwitchInfo(track1Name + self, switchSuffix);

        }

        double len = 168;
        points = new Vector3[2][4];
        leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }
        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        map_ModelTrainSet.addToTrackCounter("Switch " + ((dir ? "Left" : "Right")), ((dLen + len) / 100 * priceMod));

      }
    }
    {
      String self = "11";
      String track1Name = "10";
      String track2Name = "12";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dThk = map_ModelTrainSet.railThickness;
        double len = map_ModelTrainSet.getLength("2");
        Vector3[][] points = new Vector3[2][4];
        Vector3[] leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        Vector3[] rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        int sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        int j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        String l = "2";
        map_ModelTrainSet.addToTrackCounter("Straight " + " L:" + l, ((len) / 100 * priceMod));

      }
    }
    {
      String self = "12";
      String switchSuffix = map_ModelTrainSet.switchSuffix;
      boolean dir = false;
      String track1Name = "11";
      String track2Name = "13";
      String track3Name = "59";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("") && track3Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {

        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = 22.5;
        double dRad = 438;
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);
        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;

        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self + switchSuffix, points, sleeperList, track1Name, track3Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        if (!(track3Name.equals(""))) {
          map_ModelTrainSet.addCrossSwitchInfo(track3Name + self, switchSuffix);
        }
        if (!(track1Name.equals(""))) {
          map_ModelTrainSet.addCrossSwitchInfo(track1Name + self, switchSuffix);

        }

        double len = 168;
        points = new Vector3[2][4];
        leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }
        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        map_ModelTrainSet.addToTrackCounter("Switch " + ((dir ? "Left" : "Right")), ((dLen + len) / 100 * priceMod));

      }
    }
    {
      String self = "13";
      String track1Name = "12";
      String track2Name = "14";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dThk = map_ModelTrainSet.railThickness;
        double len = map_ModelTrainSet.getLength("2");
        Vector3[][] points = new Vector3[2][4];
        Vector3[] leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        Vector3[] rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        int sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        int j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        String l = "2";
        map_ModelTrainSet.addToTrackCounter("Straight " + " L:" + l, ((len) / 100 * priceMod));

      }
    }
    {
      String self = "14";
      String track1Name = "13";
      String track2Name = "15";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dThk = map_ModelTrainSet.railThickness;
        double len = map_ModelTrainSet.getLength("1");
        Vector3[][] points = new Vector3[2][4];
        Vector3[] leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        Vector3[] rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        int sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        int j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        String l = "1";
        map_ModelTrainSet.addToTrackCounter("Straight " + " L:" + l, ((len) / 100 * priceMod));

      }
    }
    {
      String self = "15";
      String track1Name = "14";
      String track2Name = "16";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dThk = map_ModelTrainSet.railThickness;
        double len = map_ModelTrainSet.getLength("1");
        Vector3[][] points = new Vector3[2][4];
        Vector3[] leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        Vector3[] rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        int sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        int j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        String l = "1";
        map_ModelTrainSet.addToTrackCounter("Straight " + " L:" + l, ((len) / 100 * priceMod));

      }
    }
    {
      String self = "16";
      String track1Name = "15";
      String track2Name = "17";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("45");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "45";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "17";
      String track1Name = "16";
      String track2Name = "18";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("45");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "45";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "18";
      String track1Name = "17";
      String track2Name = "19";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("22.5");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "22.5";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "19";
      String track1Name = "18";
      String track2Name = "1";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("45");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "45";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "50";
      String track1Name = "";
      String track2Name = "51";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dThk = map_ModelTrainSet.railThickness;
        double len = map_ModelTrainSet.getLength("2");
        Vector3[][] points = new Vector3[2][4];
        Vector3[] leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        Vector3[] rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        int sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        int j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        String l = "2";
        map_ModelTrainSet.addToTrackCounter("Straight " + " L:" + l, ((len) / 100 * priceMod));

      }
    }
    {
      String self = "51";
      String track1Name = "50";
      String track2Name = "2";
      boolean dir = true;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("22.5");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "22.5";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "52";
      String track1Name = "3";
      String track2Name = "53";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("22.5");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "22.5";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "53";
      String track1Name = "52";
      String track2Name = "54";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("22.5");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "22.5";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      // Get names of connecting tracks 
      String self = "54";
      String crossSuffix = map_ModelTrainSet.crossSuffix;
      String track1Name = "4";
      String track2Name = "5";
      String track3Name = "53";
      String track4Name = "55";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("") && track3Name.equals("") && track4Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {

        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dThk = map_ModelTrainSet.railThickness;
        double len = 168;
        double len2 = 181;
        double angle = 22.5;
        if (dir) {
          angle = -angle;
        }
        Vector3[][] points = new Vector3[2][4];
        Vector3[] leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        Vector3[] rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        int sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        int j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }
        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        map_ModelTrainSet.addTrackCross(self, self + crossSuffix, angle);

        points = new Vector3[2][4];
        leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len2, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len2, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len2, 0, dWid + dThk);
        rightRail[2] = new Vector3(len2, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        xEnd = len2 - xStart;
        xLen = xEnd - xStart;
        xPos = xStart;
        sleepers = ((int) Math.round(len2 / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        sleeperList = new Vector3[sleepers + 1][];
        xInc = xLen / sleepers;
        j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }
        map_ModelTrainSet.addTrackSegment(self + crossSuffix, points, sleeperList, track3Name, track4Name, fromPoint, toPoint, len2);
        if (!(track3Name.equals(""))) {
          map_ModelTrainSet.addCrossSwitchInfo(track3Name + self, crossSuffix);
        }
        if (!(track4Name.equals(""))) {
          map_ModelTrainSet.addCrossSwitchInfo(track4Name + self, crossSuffix);

        }
        double priceMod = map_ModelTrainSet.pricePerCM;
        map_ModelTrainSet.addToTrackCounter("Crossing " + ((dir ? "Left" : "Right")), ((len + len2) / 100 * priceMod));
      }
    }
    {
      String self = "55";
      String track1Name = "54";
      String track2Name = "56";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("22.5");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "22.5";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "56";
      String track1Name = "55";
      String track2Name = "57";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("45");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "45";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "57";
      String track1Name = "56";
      String track2Name = "58";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("45");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "45";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "58";
      String track1Name = "57";
      String track2Name = "10";
      boolean dir = false;
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dGap = map_ModelTrainSet.pointGapCurve;
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dAng = Double.parseDouble("22.5");
        double dRad = map_ModelTrainSet.getRadius("2");
        if (dir) {
          dRad = -dRad;
          dAng = -dAng;
        }
        double dThk = map_ModelTrainSet.railThickness;
        double dLen = map_ModelTrainSet.arcLength(dRad, dAng);

        int dPoints = ((int) (dAng / dGap));
        dPoints = Math.abs(dPoints);

        Vector3[][] points = new Vector3[2][];
        Vector3[] leftRail = new Vector3[dPoints * 2];
        Vector3[] rightRail = new Vector3[dPoints * 2];
        double angleMod = dAng / (dPoints - 1);
        double angle = 0;
        for (int i = 0; i < dPoints * 2; i++) {
          if (i < dPoints) {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid - dThk, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid + dThk, dRad, angle);
            if (dPoints - i != 1) {
              angle += angleMod;
            }
          } else {
            leftRail[i] = map_ModelTrainSet.arcCalc(-dWid, dRad, angle);
            rightRail[i] = map_ModelTrainSet.arcCalc(dWid, dRad, angle);
            angle -= angleMod;
          }
        }
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[dPoints - 1], rightRail[dPoints - 1]);
        points[0] = leftRail;
        points[1] = rightRail;

        double angleStart = map_ModelTrainSet.arcPercentToAngle(map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleEnd = map_ModelTrainSet.arcPercentToAngle(dLen - map_ModelTrainSet.sleeperWidth, dLen, dAng);
        double angleLen = angleEnd - angleStart;
        angle = angleStart;
        int sleepers = ((int) Math.round(dLen / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        sleepers = Math.abs(sleepers);
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double angleInc = angleLen / sleepers;
        int j = 0;
        Vector3 p = new Vector3(0, 0, dRad);
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i] = map_ModelTrainSet.rotatePoint(s[i], angle, p);
          }
          sleeperList[j] = s;
          angle += angleInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, dLen, dAng, new Vector3(0, 0, dRad));
        double priceMod = map_ModelTrainSet.pricePerCM;
        String r = "2";
        String a = "22.5";
        map_ModelTrainSet.addToTrackCounter("Curve " + ((dir ? "Left" : "Right")) + " R:" + r + " A:" + a, ((dLen) / 100 * priceMod));

      }
    }
    {
      String self = "59";
      String track1Name = "12";
      String track2Name = "60";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dThk = map_ModelTrainSet.railThickness;
        double len = map_ModelTrainSet.getLength("2");
        Vector3[][] points = new Vector3[2][4];
        Vector3[] leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        Vector3[] rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        int sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        int j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        String l = "2";
        map_ModelTrainSet.addToTrackCounter("Straight " + " L:" + l, ((len) / 100 * priceMod));

      }
    }
    {
      String self = "60";
      String track1Name = "59";
      String track2Name = "";
      boolean first = false;
      if (!(first) && track1Name.equals("") && track2Name.equals("")) {
        System.out.println("Track " + self + " has no track connections.");
      } else {
        double dWid = map_ModelTrainSet.railWidth * 0.5;
        double dThk = map_ModelTrainSet.railThickness;
        double len = map_ModelTrainSet.getLength("2");
        Vector3[][] points = new Vector3[2][4];
        Vector3[] leftRail = new Vector3[4];
        leftRail[0] = new Vector3(0, 0, -dWid - dThk);
        leftRail[1] = new Vector3(len, 0, -dWid - dThk);
        leftRail[2] = new Vector3(len, 0, -dWid);
        leftRail[3] = new Vector3(0, 0, -dWid);
        Vector3[] rightRail = new Vector3[4];
        rightRail[0] = new Vector3(0, 0, dWid + dThk);
        rightRail[1] = new Vector3(len, 0, dWid + dThk);
        rightRail[2] = new Vector3(len, 0, dWid);
        rightRail[3] = new Vector3(0, 0, dWid);
        Vector3 fromPoint = Vector3.midPoint(leftRail[0], rightRail[0]);
        Vector3 toPoint = Vector3.midPoint(leftRail[1], rightRail[1]);
        points[0] = leftRail;
        points[1] = rightRail;
        double xStart = map_ModelTrainSet.sleeperWidth;
        double xEnd = len - xStart;
        double xLen = xEnd - xStart;
        double xPos = xStart;
        int sleepers = ((int) Math.round(len / map_ModelTrainSet.standardLength * map_ModelTrainSet.standardBuffers));
        Vector3[][] sleeperList = new Vector3[sleepers + 1][];
        double xInc = xLen / sleepers;
        int j = 0;
        while (j <= sleepers) {
          Vector3[] s = map_ModelTrainSet.createSleeper();
          for (int i = 0; i < s.length; i++) {
            s[i].x += xPos;
          }
          sleeperList[j] = s;
          xPos += xInc;
          j++;
        }

        map_ModelTrainSet.addTrackSegment(self, points, sleeperList, track1Name, track2Name, fromPoint, toPoint, len);
        double priceMod = map_ModelTrainSet.pricePerCM;
        String l = "2";
        map_ModelTrainSet.addToTrackCounter("Straight " + " L:" + l, ((len) / 100 * priceMod));

      }
    }
  }
}
